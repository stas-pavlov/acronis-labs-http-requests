
# URL of Acronis DC with API version
@baseUrl = https://dev-cloud.acronis.com/api/2
@baseUrl2 = https://dev-cloud.acronis.com

# A previously filled with data test lab tenant id
@cyber_protection_lab_tenant_id = <your_partner_tenant_id>

# A previously filled with data test lab customer tenant id
# 71026519-65d4-4843-863a-f6058a667520
@cyber_protection_lab_customer_tenant_id = <your_test_customer_tenant_id>

###

# Issue a JWT token uning an API Client credentials
# @name issueToken
POST {{baseUrl}}/idp/token HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Authorization: Basic {{client_id}}:{{client_secret}}

grant_type=client_credentials

###
@token = {{issueToken.response.body.access_token}}

# Get an API Client info
# @name apiClient
GET {{baseUrl}}/clients/{{client_id}} HTTP/1.1
Authorization: Bearer {{token}}

###
# Save an API Client tenant id into the @root_tenant_id variable
@root_tenant_id = {{apiClient.response.body.tenant_id}}

###

# Get a root teanant info
GET {{baseUrl}}/tenants/{{root_tenant_id}} HTTP/1.1
Authorization: Bearer {{token}}

###

# Get a customer-scoped token
# @name issueScopedToken
POST {{baseUrl}}/idp/token HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Authorization: Bearer {{token}}

grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion={{token}}&scope=urn:acronis.com:tenant-id:{{cyber_protection_lab_customer_tenant_id}}

###

@scoped_token = {{issueScopedToken.response.body.access_token}}

###

# Get filtered resources list
GET {{baseUrl2}}/api/resource_management/v4/resources
Authorization: Bearer {{scoped_token}}

###

GET {{baseUrl2}}/api/resource_management/v4/resources?type=resource.machine
Authorization: Bearer {{scoped_token}}

###

GET {{baseUrl2}}/api/resource_management/v4/resources?search=test*
Authorization: Bearer {{scoped_token}}

###

# @name demoPaging
GET {{baseUrl2}}/api/resource_management/v4/resources?search=test*&limit=2
Authorization: Bearer {{scoped_token}}

###

@after = {{demoPaging.response.body.paging.cursors.after}}

###

# @name demoPaging
GET {{baseUrl2}}/api/resource_management/v4/resources?search=test*&limit=2&after={{after}}
Authorization: Bearer {{scoped_token}}

###

@before = {{demoPaging.response.body.paging.cursors.before}}

###

# @name demoPaging
GET {{baseUrl2}}/api/resource_management/v4/resources?search=test*&limit=2&before={{before}}
Authorization: Bearer {{scoped_token}}

###
# Create a static group
POST {{baseUrl2}}/api/resource_management/v4/resources
Content-Type: application/json
Authorization: Bearer {{scoped_token}}

{
    "type": "resource.group.computers",
    "parent_group_ids": [
        "301d1574-849e-4714-859f-3a2ec12a218b" 
    ],
    "allowed_member_types": [
        "resource.machine"
    ],
    "name": "Training March Static Group"
}

###

# Create a dynamic group
POST {{baseUrl2}}/api/resource_management/v4/resources
Content-Type: application/json
Authorization: Bearer {{scoped_token}}

{
    "type": "resource.group.computers",
    "group_condition": "test-vm*",
    "parent_group_ids": [
        "301d1574-849e-4714-859f-3a2ec12a218b" 
    ],
    "allowed_member_types": [
        "resource.machine"
    ],
    "name": "Training March Dynamic Group"
}

###

# Search for created groups ids
GET {{baseUrl2}}/api/resource_management/v4/resources?search=test-vm*
Authorization: Bearer {{scoped_token}}

###

# Delete created groups ids
DELETE  {{baseUrl2}}/api/resource_management/v4/resources/<resource_id>
Authorization: Bearer {{scoped_token}}

###

# Get resources statuses
GET {{baseUrl2}}/api/resource_management/v4/resource_statuses?type=resource.machine&include_attributes=true
Authorization: Bearer {{scoped_token}}

###

# Create a resource seection
POST {{baseUrl2}}/api/resource_management/v4/context_selections
Content-Type: application/json
Authorization: Bearer {{scoped_token}}

{
  "items": [
      "<resource_id1>",
      "<resource_id2>" 
  ],
  "tenant_id": "{{cyber_protection_lab_customer_tenant_id}}"
}

###

# Get resources selections
GET {{baseUrl2}}/api/resource_management/v4/context_selections/<context_id>
Authorization: Bearer {{scoped_token}}

###

# Delete resources selections
DELETE {{baseUrl2}}/api/resource_management/v4/context_selections/<context_id>
Authorization: Bearer {{scoped_token}}

###

# Get filtered protection plans list
GET {{baseUrl2}}/api/policy_management/v4/policies?type=policy.protection.disaster_recovery
Authorization: Bearer {{scoped_token}}

###

# Get filtered protection plans list
GET {{baseUrl2}}/api/policy_management/v4/policies
Authorization: Bearer {{scoped_token}}

###

# Get full composite protection plans for export
GET {{baseUrl2}}/api/policy_management/v4/policies/<plan_id>?full_composite=true&include_settings=true
Authorization: Bearer {{scoped_token}}

###

# Create a policy
POST {{baseUrl2}}/api/policy_management/v4/policies
Content-Type: application/json
Authorization: Bearer {{scoped_token}}

{
    "subject": {
        "disable_applications_on_conflict": true,
        "policy": [
            {
                "id": "<plan_id>",
                "type": "policy.protection.total",
                "name": "<plan_name>",
                "origin": "upstream",
                "enabled": true,
                "template_source_id": "",
                "plan_hash": "",
                "source_type": "",
                "days_without_backup_alert": null,
                "ls_features": ""
            },
            {
                "id": "<backup_policy_id>",
                "parent_ids": [
                    "<plan_id>"
                ],
                "type": "policy.backup.machine",
                "origin": "upstream",
                "enabled": true,
                "settings_schema": "2.0",
                "settings": {
                    "compression": "normal",
                    "format": "auto",
                    "multi_volume_snapshotting_enabled": true,
                    "preserve_file_security_settings": true,
                    "reattempts": {
                        "enabled": true,
                        "interval": {
                            "type": "seconds",
                            "count": 30
                        },
                        "max_attempts": 30
                    },
                    "silent_mode_enabled": true,
                    "splitting": {
                        "size": 9223372036854775807
                    },
                    "vm_snapshot_reattempts": {
                        "enabled": true,
                        "interval": {
                            "type": "minutes",
                            "count": 5
                        },
                        "max_attempts": 3
                    },
                    "vss": {
                        "enabled": true,
                        "provider": "target_system_defined"
                    },
                    "archive": {
                        "name": "[Machine Name]-[Plan ID]-[Unique ID]A"
                    },
                    "performance_window": {
                        "enabled": false
                    },
                    "retention": {
                        "rules": [
                            {
                                "backup_set": [
                                    "daily"
                                ],
                                "max_age": {
                                    "type": "days",
                                    "count": 7
                                }
                            },
                            {
                                "backup_set": [
                                    "weekly"
                                ],
                                "max_age": {
                                    "type": "weeks",
                                    "count": 4
                                }
                            },
                            {
                                "backup_set": [
                                    "monthly"
                                ],
                                "max_age": {
                                    "type": "months",
                                    "count": 6
                                }
                            }
                        ],
                        "after_backup": true
                    },
                    "vault": {
                        "type": "cloud",
                        "use_policy_credentials": true
                    },
                    "alerts": {
                        "enabled": false,
                        "max_days_without_backup": 5
                    },
                    "email_notifications": {
                        "enabled": false,
                        "reattmpts": {
                            "enabled": true,
                            "interval": {
                                "type": "seconds",
                                "count": 30
                            },
                            "max_attempts": 30
                        },
                        "subject": "",
                        "to": [],
                        "batching": {
                            "enabled": false,
                            "timeout": {
                                "type": "seconds",
                                "count": 720
                            }
                        }
                    },
                    "scheduling": {
                        "backup_sets": [
                            {
                                "type": "auto",
                                "schedule": {
                                    "alarms": {
                                        "time": {
                                            "weekdays": [
                                                "mon",
                                                "tue",
                                                "wed",
                                                "thu",
                                                "fri"
                                            ],
                                            "rand_max_delay": {
                                                "type": "minutes",
                                                "count": 30
                                            },
                                            "repeat_at": [
                                                {
                                                    "hour": 15,
                                                    "minute": 45
                                                }
                                            ]
                                        }
                                    },
                                    "conditions": {},
                                    "prevent_sleep": true,
                                    "type": "weekly"
                                }
                            }
                        ],
                        "enabled": true,
                        "rand_max_delay": {
                            "type": "minutes",
                            "count": 30
                        },
                        "scheme": "always_incremental",
                        "task_failure": {
                            "enabled": false,
                            "interval": {
                                "type": "hours",
                                "count": 1
                            },
                            "max_attempts": 1
                        },
                        "weekly_backup_day": "mon"
                    },
                    "windows_event_log": {
                        "enabled": false,
                        "level": "errors_and_warnings"
                    },
                    "cbt": "enable_and_use",
                    "fast_backup_enabled": true,
                    "quiesce_snapshotting_enabled": true
                },
                "template_source_id": "",
                "source_type": "machines",
                "days_without_backup_alert": null,
                "ls_features": ""
            }
        ]
    }
}

###

# Get full policy for update
GET {{baseUrl2}}/api/policy_management/v4/policies/<plan_id>?full_composite=true&include_settings=true
Content-Type: application/json
Authorization: Bearer {{scoped_token}}


###

# Update a policy
PATCH {{baseUrl2}}/api/policy_management/v4/policies/<plan_id>
Content-Type: application/json
Authorization: Bearer {{scoped_token}}

{
    "subject": {
        
  "policy": [
      <put_policy_body_here>
      ]
  }    
}

###

# Delete a policy
DELETE  {{baseUrl2}}/api/policy_management/v4/policies/<plan_id>

###

# Create a plan selection
POST {{baseUrl2}}/api/policy_management/v4/policy_selections
Content-Type: application/json
Authorization: Bearer {{scoped_token}}

{
    "items":[
      "<plan_id>"
    ]
}

###

# Get plan selections
GET {{baseUrl2}}/api/policy_management/v4/policy_selections
Authorization: Bearer {{scoped_token}}

###

# Delete plan selections
DELETE  {{baseUrl2}}/api/policy_management/v4/policy_selections/<policy_selection_id>
Authorization: Bearer {{scoped_token}}

###

# Apply a plan
POST {{baseUrl2}}/api/policy_management/v4/applications
Content-Type: application/json
Authorization: Bearer {{scoped_token}}

{
    "policy_id": "<plan_id>",
    "context": {
        "items": [
            "<resource_id>"
        ]
    },
    "disable_on_conflict": true
}

###

# Revoce a plan
DELETE  {{baseUrl2}}/api/policy_management/v4/applications?context_id=<resource_id>&policy_id=<plan_id>
Authorization: Bearer {{scoped_token}}

###

# Get a filtered applications list
GET {{baseUrl2}}/api/policy_management/v4/applications?include_running_blockers=true&include_deployment_errors=true&include_validation_issues=true
Authorization: Bearer {{scoped_token}}

# include_multiple_applications_conflict
# include_validation_issues
# include_deployment_errors
# include_running_blockers

###
PUT {{baseUrl2}}/api/policy_management/v4/applications/run
Authorization: Bearer {{scoped_token}}
Content-Type: application/json

{
    "state": "running",
    "policy_id": "<plan_id>",
    "context_ids": [
            "<resource_id>"
    ]
}

###
GET {{baseUrl}}/tenants/{{cyber_protection_lab_customer_tenant_id}}/registration_tokens
Authorization: Bearer {{token}}

###
GET {{baseUrl}}/tenants/{{cyber_protection_lab_customer_tenant_id}}/users
Authorization: Bearer {{token}}

###
GET {{baseUrl}}/users/<user_id>
Authorization: Bearer {{token}}

###
POST {{baseUrl}}/tenants/{{cyber_protection_lab_customer_tenant_id}}/registration_tokens
Authorization: Bearer {{token}}
Content-Type: application/json

{
	"expires_in": 259200,
	"scopes": [
		"urn:acronis.com:tenant-id:<personal_tenant_id>:backup_agent_admin"	
	]
}

###
GET {{baseUrl2}}/api/1/groups/{{cyber_protection_lab_customer_tenant_id}}
Authorization: Bearer {{token}}

###
POST {{baseUrl}}/tenants/{{cyber_protection_lab_customer_tenant_id}}/registration_tokens
Authorization: Bearer {{token}}
Content-Type: application/json

{
	"expires_in": 259200,
	"scopes": [
		"urn:acronis.com:tenant-id:<personal_tenant_id>:backup_agent_admin",
    "urn:acronis.com::policy_management:<customer_big_int_id>|<plan_id>:apply_revoke"

	]
}

###

# Exchange a registration token
# @name exchangeToken
POST {{baseUrl}}/idp/token HTTP/1.1
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=<reg-token>

###

@exhcangedToken = {{exchangeToken.response.body.access_token}}

###

# Apply a plan
POST {{baseUrl2}}/api/policy_management/v4/applications
Authorization: Bearer {{exhcangedToken}}

{
     "context": {
         "items": [
             "<resource_id_from_the_first_step>"
         ]
     }
}

